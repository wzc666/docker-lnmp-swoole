version: '3'

networks: 
    frontend:
        driver: ${NETWORKS_DRIVER}
    backend:
        driver: ${NETWORKS_DRIVER}
    elastic:
        driver: bridge

services:
    nginx:
        restart: always
        build: ./nginx
        container_name: nginx
        ports:
            - 80:80
            - 443:443
        volumes: 
            - ./nginx/sites:/etc/nginx/conf.d
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        command: [nginx-debug, '-g', 'daemon off;']
        depends_on: 
            - php7.4-fpm
        links: 
            - php7.4-fpm
        networks: 
            - frontend
            - backend
    php7.4-fpm:
        build: 
            context: ./php7.4-fpm 
            args:
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
                - INSTSLL_PDO_MYSQL=${PHP_FPM_INSTSLL_PDO_MYSQL}
        container_name: php7.4-fpm
        restart: always
        working_dir: ${CONTAINER_WWWROOT}
        ports:
            - 9000:9000
        volumes: 
            - ./php7.4-fpm/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        networks: 
            - backend
    redis:
        build: ./redis
        container_name: redis
        volumes:
            - ${DATA_PATH}/redis:/data
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - backend
    
    mysql:
        build:
            context: ./mysql
            args:
            - MYSQL_VERSION=${MYSQL_VERSION}
        container_name: mysql
        command: 
            --innodb-use-native-aio=0 
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - TIMEZONE=${WORKSPACE_TIMEZONE}
        volumes:
            - ${DATA_PATH}/mysql:/var/lib/mysql
            - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
            - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
        ports:
            - ${MYSQL_PORT}:3306
        networks:
            - backend
    
    # mariadb:
    #     build:
    #         context: ./mariadb
    #         args:
    #         - http_proxy
    #         - https_proxy
    #         - no_proxy
    #         - MARIADB_VERSION=${MARIADB_VERSION}
    #     container_name: mariadb
    #     volumes:
    #         - ${DATA_PATH}/mariadb:/var/lib/mysql
    #         - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #     ports:
    #         - ${MARIADB_PORT}:3366
    #     environment:
    #         - TZ=${WORKSPACE_TIMEZONE}
    #         - MYSQL_DATABASE=${MARIADB_DATABASE}
    #         - MYSQL_USER=${MARIADB_USER}
    #         - MYSQL_PASSWORD=${MARIADB_PASSWORD}
    #         - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    #     networks:
    #         - backend

    # zookeeper:
    #     build: ./zookeeper
    #     container_name: zookeeper
    #     volumes:
    #         - ${DATA_PATH}/zookeeper/data:/data
    #         - ${DATA_PATH}/zookeeper/datalog:/datalog
    #     ports:
    #         - ${ZOOKEEPER_PORT}:2181
    #     networks:
    #         - backend

    es01:
        image: elasticsearch:7.11.2
        container_name: es01
        environment:
            - node.name=es01
            - node.master=true 
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=es02,es03
            - cluster.initial_master_nodes=es01,es02,es03
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - data01:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - elastic
    es02:
        image: elasticsearch:7.11.2
        container_name: es02
        environment:
            - node.name=es02
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=es01,es03
            - cluster.initial_master_nodes=es01,es02,es03
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - data02:/usr/share/elasticsearch/data
        networks:
            - elastic
    es03:
        image: elasticsearch:7.11.2
        container_name: es03
        environment:
            - node.name=es03
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=es01,es02
            - cluster.initial_master_nodes=es01,es02,es03
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - data03:/usr/share/elasticsearch/data
        networks:
            - elastic
    kibana:
        container_name: kibana
        image: kibana:7.11.2
        volumes:
            - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
        environment: 
            - ELASTICSEARCH_URL:http://es01:9200
            # - ELASTICSEARCH_HOSTS:'["http://es01:9200","http://es02:9200","http://es03:9200"]'
        ports: 
            - 5601:5601
        links: 
            - es01
        networks:
            - elastic
    canal:
        image: canal/canal-server:latest
        container_name: canal-server
        ports: 
            - 11111:11111
        environment: 
            - canal.instance.mysql.slaveId=8899
            - canal.auto.scan=false
            - canal.destinations=test
            - canal.instance.master.address=mysql:3306
            - canal.instance.defaultDatabaseName=kf
            - canal.instance.dbUsername=canal
            - canal.instance.dbPassword=canal
            - canal.mq.topic=big_data
            - canal.instance.filter.regex=esen_approval.apt_approval
        volumes: 
            # - ./canal-server/conf:/home/admin/canal-server/conf
            - ./canal-server/logs:/home/admin/canal-server/logs
        depends_on: 
            - mysql
        # links: 
            # - mysql
        hostname: '0'
        networks:
            - backend 
volumes:
    data01:
        driver: local
    data02:
        driver: local
    data03:
        driver: local
    